<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ChangePasswordHash" xml:space="preserve">
    <value>update UserMaster set PwdHash = @newPwdHash where email = @email and PwdHash = @oldPwdHash</value>
  </data>
  <data name="GetCurrentOffer" xml:space="preserve">
    <value>select Id, Item, Price, Packing, AvailableQty from OfferMaster;</value>
  </data>
  <data name="GetHashAndRole" xml:space="preserve">
    <value>select id, Role,PwdHash from UserMaster where Email = @email;</value>
  </data>
  <data name="GetMaxOrderNumber" xml:space="preserve">
    <value>select max(IntValue) from Setup where MKey = 'MaxOrderNumber'</value>
  </data>
  <data name="GetPwdHash" xml:space="preserve">
    <value>select PwdHash from UserMaster where email = @email;</value>
  </data>
  <data name="GetUserData" xml:space="preserve">
    <value>select b.Id, FirstName,LastName, Phone, Birthday, MailingAddress1
	, MailingAddress2, MailingCity, MailingState, MailingZip
	from UserMaster a join UserProfiles b
		on a.Id = b.UserId
			where Email = @email;

select b.Id, MDate, OrderNo,Descr, Isdelivered
	from UserMaster a join OrderMaster b
		on a.Id = b.UserId
			where Email = @email;


select c.Id, d.Item, d.Price, d.Packing, c.OrderQty,c.WishList
	from UserMaster a join OrderMaster b
		on a.Id = b.UserId			
			join OrderDetails c
				on b.Id = c.OrderId
			join OfferMaster d
				on d.Id = c.OfferId
			where Email = @email;

select b.Id, b.Address1 
	from UserMaster a join ShippingAddresses b
		on a.Id = b.UserId
			where Email = @email;

select b.Id, b.CardName
	from UserMaster a join CreditCards b
		on a.Id = b.UserId
			where Email = @email;</value>
  </data>
  <data name="GetUserIdFromEmail" xml:space="preserve">
    <value>select MAX(Id) from UserMaster where Email = @email;</value>
  </data>
  <data name="GetProfile" xml:space="preserve">
    <value>select b.id, firstName,lastName, phone, birthDay, mailingAddress1
	, mailingAddress2, mailingCity, mailingState, mailingZip
	from userMaster a join userProfiles b
		on a.Id = b.UserId
			where email = @email;</value>
  </data>
  <data name="IsEmailAndHashExist" xml:space="preserve">
    <value>select 0 from UserMaster where Email = @email and PwdHash = @oldPwdHash;</value>
  </data>
  <data name="IsEmailExist" xml:space="preserve">
    <value>select 0 from UserMaster where Email = @email;</value>
  </data>
  <data name="NewPasswordHash" xml:space="preserve">
    <value>update UserMaster set PwdHash = @newPwdHash where email = @email;</value>
  </data>
  <data name="SetMaxOrderNumber" xml:space="preserve">
    <value>update Setup set IntValue = @value where MKey = 'MaxOrderNumber'</value>
  </data>
  <data name="UpdateProfile" xml:space="preserve">
    <value>update UserProfiles 
	set FirstName = @firstName,
	LastName = @lastName,
	Phone = @phone,
	Birthday = @birthDay,
	MailingAddress1 = @mailingAddress1,
	MailingAddress2 = @mailingAddress2,
	MailingCity = @mailingCity,
	MailingState = @mailingState,
	MailingZip = @mailingZip
	where Id = @id;</value>
  </data>
  <data name="GetOrderHeaders" xml:space="preserve">
    <value>select b.id,mDate,orderNo,descr,amount,invoice
	from UserMaster a join OrderMaster b
		on a.Id = b.UserId
			where Email = @email;</value>
  </data>
  <data name="GetShippingAddress" xml:space="preserve">
    <value>select b.id,address1,zip,street,city, isDefault
	from UserMaster a join ShippingAddresses b
		on a.Id = b.UserId
			where email = @email;</value>
  </data>
  <data name="UpdateAddress" xml:space="preserve">
    <value>update ShippingAddresses
	set Address1 = @address1,
	City = @city,
	Zip = @zip,
	Street = @street,
	IsDefault = @isDefault
	where Id = @id;</value>
  </data>
  <data name="DeleteCreditCard" xml:space="preserve">
    <value>delete from CreditCards where id = @id</value>
  </data>
  <data name="GetCreditCards" xml:space="preserve">
    <value>select b.id, cardName,cardNumber, expiryDate
	from UserMaster a join CreditCards b
		on a.Id = b.UserId
		where email = @email;</value>
  </data>
  <data name="GetDefaultShippingAddress" xml:space="preserve">
    <value>select id, address1,zip,street,city
	from ShippingAddresses
		where UserId=@userId and IsDefault = 1;</value>
  </data>
  <data name="GetAllShippingAddresses" xml:space="preserve">
    <value>select id,address1,zip,street,city, isDefault
	from ShippingAddresses
		where userId =@userId;</value>
  </data>
</root>